pipeline {
    agent any
    environment {

        APP_DOCKER_REGISTRY = "localhost:5000"

        APP_POM_PATH = 'app/pom.xml'

        APP_PROJECT_NAME = 'testjenkins'
        APP_PROJECT_PATH = ""
        APP_PROFILE = "dev"
        APP_PORT = 8081
        APP_NODEPORT = 30001
        APP_DOCKERFILE = "app/deploy/Dockerfile"
        APP_DOCKER_CONTEXT = "app"
    }
    stages {
        stage('Clone app repository') {
            steps {
                dir('app') {
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[url: 'https://github.com/psantiagomm/testjenkins.git']]
                    ])
                }
            }
        }
        stage('Load Reusable Stages') {
            steps {
                script {
                    stages = load './deploy/scripts/groovy/deployStages.groovy'
                }
            }
        }
        stage('Build Docker Image') {
            environment {
                APP_ARTIFACT_ID = readMavenPom(file: "$APP_POM_PATH").getArtifactId()
                APP_ARTIFACT_VERSION = readMavenPom(file: "$APP_POM_PATH").getVersion()
                APP_IMAGE_FULL_NAME = "${ARTIFACT_ID}:${ARTIFACT_VERSION}"
            }
            steps {
                script {
                    stages.defineEnvVars()
                    echo "Funciona la variable global ${APP_IMAGE_FULL_NAME}"
                    // docker.build("${DOCKER_REGISTRY}/${APP_IMAGE_FULL_NAME}", ".")
                    stages.buildStage()
                    sh '''
                    docker --version
                    '''
                    //docker build -t ${DOCKER_REGISTRY}/${APP_IMAGE_FULL_NAME} -f ${APP_DOCKERFILE} ${APP_DOCKER_CONTEXT}
                    
                    echo "Funcion√≥ el comando build"
                    
                }
            }
        }
        stage('Push Docker Image') {
            environment {
                APP_ARTIFACT_ID = readMavenPom(file: "$APP_POM_PATH").getArtifactId()
                APP_ARTIFACT_VERSION = readMavenPom(file: "$APP_POM_PATH").getVersion()
                APP_IMAGE_FULL_NAME = "${ARTIFACT_ID}:${ARTIFACT_VERSION}"
            }            
            steps {
                script {
                    stages.pushStage()
                    docker.withRegistry("http://${DOCKER_REGISTRY}") {
                        docker.image("${DOCKER_REGISTRY}/${APP_IMAGE_FULL_NAME}").push()
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            environment {
                APP_ARTIFACT_ID = readMavenPom(file: "$APP_POM_PATH").getArtifactId()
                APP_ARTIFACT_VERSION = readMavenPom(file: "$APP_POM_PATH").getVersion()
                APP_IMAGE_FULL_NAME = "${ARTIFACT_ID}:${ARTIFACT_VERSION}"
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'TESTJENKINS_MATER_PASS', variable: 'MASTER_PASS')]) {
                        stages.deployStage()
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Deploy completed successfully!'
        }
        failure {
            echo 'Deploy failed!'
        }
    }
}